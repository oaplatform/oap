name = oap
services {
  oap-time-java {
    name = oap-time
    profile = java-time
    implementation = oap.time.JavaTimeService
  }

  oap-time-joda {
    name = oap-time
    profile = -java-time
    implementation = oap.time.JodaTimeService
  }

  oap-http-server {
    profile = http
    implementation = oap.http.server.nio.NioHttpServer
    parameters {
      //      port = 8080

      backlog = -1
      idleTimeout = -1
      readTimeout = 60s
      tcpNodelay = true
      ioThreads = -1
      workerThreads = -1
      maxEntitySize = -1
      maxParameters = -1
      maxHeaders = -1
      maxHeaderSize = -1
      statistics = false
      forceCompressionSupport = false

      alwaysSetDate = true;
      alwaysSetKeepAlive = true;
    }
    supervision.supervise = true
  }

  oap-http-health-handler {
    profile = http
    implementation = oap.http.server.nio.health.HealthHttpHandler
    parameters {
      server = modules.this.oap-http-server
      prefix = /healtz
      port = 8081
      providers = []
    }

    supervision.supervise = true
  }

  oap-http-message-handler {
    profiles = [
      http
      oap-message-server
    ]
    implementation = oap.message.MessageHttpHandler
    parameters {
      server = modules.this.oap-http-server
      port = 8081
      clientHashCacheSize = 1024
      hashTtl = 6h
      context = /messages
      listeners = []

      //      controlStatePath = /opt/oap/messages/server
    }
    supervision.supervise = true
  }

  oap-http-message-sender {
    profile = oap-message-sender
    implementation = oap.message.MessageSender
    parameters {
      connectionTimeout = 30s
      timeout = 5s
      retryTimeout = 1s
      globalIoRetryTimeout = 1s
      diskSyncPeriod = 1m
      memorySyncPeriod = 100
      keepAliveDuration = 30d
      poolSize = -1
      storageLockExpiration = 1h
      port = 8080

      //      host = <unknown>
      httpPrefix = /messages

      //      persistenceDirectory = /opt/oap/messages/sender
    }
    supervision.supervise = true
  }

  remoting {
    implementation = oap.application.remote.Remote
    profiles = [
      http
      remoting
    ]
    parameters {
      server = modules.this.oap-http-server
      context = /remote/
      serialization = DEFAULT
      kernel = kernel.self
    }
    supervision.supervise = true
  }

  oap-prometheus-metrics {
    profiles = prometheus
    implementation = oap.prometheus.PrometheusExporter
    parameters {
      port = 8081
      server = modules.this.oap-http-server
    }
  }

  prometheus-jvm-exporter {
    profiles = prometheus
    implementation = oap.prometheus.PrometheusJvmExporter
    parameters {
      enableClassLoaderMetrics = true
      enableJvmMemoryMetrics = true
      enableJvmGcMetrics = true
      enableLogbackMetrics = true
      enableJvmThreadMetrics = true
    }
    supervision.supervise = true
  }

  prometheus-application-info-exporter {
    profiles = prometheus
    implementation = oap.prometheus.PrometheusApplicationInfoExporter
    supervision.supervise = true
  }
}
