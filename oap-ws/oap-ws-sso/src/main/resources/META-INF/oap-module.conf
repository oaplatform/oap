name: oap-ws-sso
dependsOn = [
  oap-ws
  oap-ws-sso-api
  oap-ws-account-social
]

services {
  oap-ws-sso-user-provider {
    implementation = oap.ws.sso.UserProvider
    remote {
      name = oap-ws-sso-user-provider-server
    }
  }

  oap-ws-sso-authenticator {
    implementation = oap.ws.sso.JwtUserAuthenticator
    parameters {
      userProvider =  modules.this.oap-ws-sso-user-provider
      jwtTokenGenerator = modules.oap-ws-sso-api.jwt-token-generator
      jwtExtractor = modules.oap-ws-sso-api.oap-ws-sso-token-extractor
    }
  }

  oap-ws-sso-jwt-security-interceptor {
   profile = [
            ws-security
            jwt-support
    ]
   implementation = oap.ws.sso.interceptor.JWTSecurityInterceptor
   name = oap-ws-sso-jwt-security-interceptor
   parameters {
        jwtExtractor = modules.oap-ws-sso-api.oap-ws-sso-token-extractor
        userProvider = modules.this.oap-ws-sso-user-provider
        roles = modules.oap-ws-sso-api.oap-ws-sso-roles
   }
  }

  auth-ws {
    implementation = oap.ws.sso.AuthWS
    parameters {
      authenticator = modules.this.oap-ws-sso-authenticator
      sessionManager = modules.oap-ws.session-manager
      roles = modules.oap-ws-sso-api.oap-ws-sso-roles
      oauthService   = modules.oap-ws-account-social.oauth-service
    }
    ws-service {
      path = auth
      sessionAware = true
      interceptors = [
       oap-ws-sso.oap-ws-sso-jwt-security-interceptor
       oap-ws-sso-api.oap-ws-sso-throttle-login-interceptor
      ]
    }
  }

  refresh-ws {
      implementation = oap.ws.sso.RefreshWS
      parameters {
        authenticator = modules.this.oap-ws-sso-authenticator
        sessionManager = modules.oap-ws.session-manager
        oauthService   = modules.oap-ws-account-social.oauth-service
      }
      ws-service {
        path = refresh
        sessionAware = true
        interceptors = [
         oap-ws-sso-api.oap-ws-sso-throttle-login-interceptor
        ]
      }
    }
}
