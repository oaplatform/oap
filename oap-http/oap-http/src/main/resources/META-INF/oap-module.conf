name = oap-http
services {
  nio-bandwidth-handler {
    profile = nio-bandwidth-handler
    implementation = oap.http.server.nio.handlers.BandwidthHandler

    supervision.supervise = true
  }

  nio-compression-handler {
    profile = nio-compression-handler
    implementation = oap.http.server.nio.handlers.CompressionNioHandler
  }

  blocking-read-timeout-handler {
    implementation = oap.http.server.nio.handlers.BlockingReadTimeoutHandler
    parameters {
      readTimeout = 60s
    }
  }

  keepalive-requests-handler {
    implementation = oap.http.server.nio.handlers.KeepaliveRequestsHandler
    parameters {
      keepaliveRequests = 1000
    }
  }

  oap-http-server {
    implementation = oap.http.server.nio.NioHttpServer
    parameters {
      defaultPort {
        httpPort = 8080
//        httpsPort = 8443
//        keyStore = /path
//        password = ...
      }
      additionalHttpPorts {
        httpprivate = 8081
      }

      backlog = -1
      idleTimeout = -1
      tcpNodelay = true
      ioThreads = -1
      workerThreads = -1
      maxEntitySize = -1
      maxParameters = -1
      maxHeaders = -1
      maxHeaderSize = -1
      statistics = false

      alwaysSetDate = true
      alwaysSetKeepAlive = true

      handlers = [
        <modules.this.keepalive-requests-handler>
        <modules.this.nio-bandwidth-handler>
        <modules.this.nio-compression-handler>
        <modules.this.blocking-read-timeout-handler>
      ]
    }
    supervision.supervise = true
  }

  oap-http-health-handler {
    implementation = oap.http.server.nio.health.HealthHttpHandler
    parameters {
      server = <modules.this.oap-http-server>
      prefix = /healtz
      port = httpprivate
      providers = []
    }

    supervision.supervise = true
  }
}
